/*
 * Copyright Â© 2019 <code@irradia.one> http://www.irradia.one
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

buildscript {
  ext.kotlin_version = "1.3.21"

  repositories {
    mavenCentral()
    google()
    jcenter()
  }

  dependencies {
    classpath "com.android.tools.build:gradle:3.3.2"
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath "digital.wup:android-maven-publish:3.6.2"
    classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.20.0"
    classpath "com.vanniktech:gradle-android-junit-jacoco-plugin:0.13.0"
  }
}

ext {
  androidBuildToolsVersion = "28.0.3"
  androidCompileSDKVersion = 28
  androidMinimumSDKVersion = 21
  androidTargetSDKVersion  = 28

  if (!project.hasProperty("nexusUsername")) {
    logger.warn("No nexusUsername property specified: Using an empty value")
    nexusUsername = ""
  }
  if (!project.hasProperty("nexusPassword")) {
    logger.warn("No nexusPassword property specified: Using an empty value")
    nexusPassword = ""
  }
}

apply plugin: "io.codearte.nexus-staging"
apply plugin: "com.vanniktech.android.junit.jacoco"

nexusStaging {
  packageGroup                = "one.irradia"
  numberOfRetries             = 32
  delayBetweenRetriesInMillis = 2000
}

allprojects {
  group   = project.ext["GROUP"]
  version = project.ext["VERSION_NAME"]
}

subprojects { project ->

  apply plugin: "com.android.library"
  apply plugin: "kotlin-android"
  apply plugin: "digital.wup.android-maven-publish"
  apply plugin: "signing"

  android {
    compileSdkVersion androidCompileSDKVersion
    buildToolsVersion androidBuildToolsVersion

    defaultConfig {
      minSdkVersion androidMinimumSDKVersion
      targetSdkVersion androidTargetSDKVersion
      testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    testOptions {
      execution "ANDROID_TEST_ORCHESTRATOR"
      animationsDisabled = true
    }
  }

  repositories {
    mavenLocal()
    mavenCentral()
  }

  task androidJavadocsJar(type: Jar) {
    classifier = "javadoc"
  }

  task androidSourcesJar(type: Jar) {
    classifier = "sources"
    from android.sourceSets.main.java.sourceFiles
  }

  publishing {
    publications {
      basicAAR(MavenPublication) {
        from components.android

        pom {
          artifactId  = POM_ARTIFACT_ID

          name        = POM_NAME
          packaging   = POM_PACKAGING
          description = POM_DESCRIPTION
          url         = POM_URL

          scm {
            connection          = POM_SCM_CONNECTION
            developerConnection = POM_SCM_DEV_CONNECTION
            url                 = POM_SCM_URL
          }

          licenses {
            license {
              name = POM_LICENCE_NAME
              url  = POM_LICENCE_URL
            }
          }

          developers {
            developer {
              id    = POM_DEVELOPER_ID
              name  = POM_DEVELOPER_NAME
              email = POM_DEVELOPER_EMAIL
              url   = POM_DEVELOPER_URL
            }
          }
        }
      }
    }

    repositories {
      maven {
        def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
        def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
        url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl

        credentials(PasswordCredentials) {
          username nexusUsername
          password nexusPassword
        }
      }
    }
  }

  artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
  }

  signing {
    useGpgCmd()
    sign publishing.publications.basicAAR
  }

  repositories {
    mavenCentral()
    jcenter()
    google()
  }

  configurations {
    dependencyKotlinReflect
    dependencyKotlinStdlib
    dependencyJUnit
    dependencyAndroidSupportTestRules
    dependencyAndroidSupportTestRunner
    dependencyAndroidTestOrchestrator
    dependencyJodaTime
    dependencyIrradiaMimeAPI
    dependencyIrradiaMimeImpl
    dependencyJackson
    dependencyGoogleGuava
    dependencySLF4J
    dependencyLogback
  }

  dependencies {
    dependencyKotlinReflect            "org.jetbrains.kotlin:kotlin-reflect:1.3.21"
    dependencyKotlinStdlib             "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    dependencyJUnit                    "junit:junit:4.12"
    dependencyAndroidSupportTestRules  "com.android.support.test:rules:1.0.2"
    dependencyAndroidSupportTestRunner "com.android.support.test:runner:1.0.2"
    dependencyAndroidTestOrchestrator  "com.android.support.test:orchestrator:1.0.2"
    dependencyJodaTime                 "joda-time:joda-time:2.10.1"
    dependencyIrradiaMimeAPI           "one.irradia.mime:one.irradia.mime.api:0.0.2"
    dependencyIrradiaMimeImpl          "one.irradia.mime:one.irradia.mime.vanilla:0.0.2"
    dependencyGoogleGuava              "com.google.guava:guava:27.1-android"
    dependencySLF4J                    "org.slf4j:slf4j-api:1.8.0-beta4"
    dependencyLogback                  "ch.qos.logback:logback-classic:1.3.0-alpha4"
    dependencyJackson                  "com.fasterxml.jackson.core:jackson-core:2.9.2"
  }
}
